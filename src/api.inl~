#ifdef  __QPARSER_API_H__
#ifndef __QPARSER_API_INL__
#define __QPARSER_API_INL__
//////////////////////////////////////////////////////////////////////////////
//
//    API.INL
//
//    Copyright Â© 2007-2008, Rehno Lindeque. All rights reserved.
//
//////////////////////////////////////////////////////////////////////////////

/*                              IMPLEMENTATION                              */
/*                              COMPILER MACROS                             */
#define _this (*(QParser::Parser*)this)

#define cast_id     QParser::Parser::cast_id
#define cast_object QParser::Parser::cast_object

/*                              IMPLEMENTATION                              */
OSobject OSI_API_CALL OSIX::Parser::beginGrammar()
{
  if(_this.grammar != null)
    return 0; // error

  QParser::Grammar* grammarObject = _this.grammar = (QParser::Grammar*) _this.beginObject<QParser::GrammarLR1>();
  return cast_object(grammarObject);
}

void OSI_API_CALL OSIX::Parser::endGrammar()
{
  QParser::Grammar* grammarObject = _this.endObject<QParser::Grammar>();
}

void OSI_API_CALL OSIX::Parser::beginRaw()
{
  QParser::Grammar* grammarObject = _this.getActiveObject<QParser::Grammar>();
  grammarObject->activeTokenType = QParser::Grammar::RAW_TOKEN;
}

void OSI_API_CALL OSIX::Parser::endRaw()
{
  QParser::Grammar* grammarObject = _this.getActiveObject<QParser::Grammar>();
  grammarObject->constructTokens();
  grammarObject->activeTokenType = (QParser::Grammar::TokenType)0;
}

void OSI_API_CALL OSIX::Parser::beginNil()
{
  QParser::Grammar* grammarObject = _this.getActiveObject<QParser::Grammar>();
  grammarObject->activeTokenType = QParser::Grammar::NIL_TOKEN;
}

void OSI_API_CALL OSIX::Parser::endNil()
{
  QParser::Grammar* grammarObject = _this.getActiveObject<QParser::Grammar>();
  grammarObject->constructTokens();
  grammarObject->activeTokenType = (QParser::Grammar::TokenType)0;
}

void OSI_API_CALL OSIX::Parser::beginLex()
{
  QParser::Grammar* grammarObject = _this.getActiveObject<QParser::Grammar>();
  grammarObject->activeTokenType = QParser::Grammar::LEX_TOKEN;
}

void OSI_API_CALL OSIX::Parser::endLex()
{
  QParser::Grammar* grammarObject = _this.getActiveObject<QParser::Grammar>();
  grammarObject->activeTokenType = (QParser::Grammar::TokenType)0;
}

void OSI_API_CALL OSIX::Parser::beginLexSymbols()
{
  QParser::Grammar* grammarObject = _this.getActiveObject<QParser::Grammar>();
  grammarObject->activeSubTokenType = QParser::Grammar::LEX_SYMBOL;
}

void OSI_API_CALL OSIX::Parser::endLexSymbols()
{
  QParser::Grammar* grammarObject = _this.getActiveObject<QParser::Grammar>();
  grammarObject->constructTokens();
  grammarObject->activeSubTokenType = (QParser::Grammar::SubTokenType)0;
}

void OSI_API_CALL OSIX::Parser::beginLexWords()
{
  QParser::Grammar* grammarObject = _this.getActiveObject<QParser::Grammar>();
  grammarObject->activeSubTokenType = QParser::Grammar::LEX_WORD;
}

void OSI_API_CALL OSIX::Parser::endLexWords()
{
  QParser::Grammar* grammarObject = _this.getActiveObject<QParser::Grammar>();
  grammarObject->constructTokens();
  grammarObject->activeSubTokenType = (QParser::Grammar::SubTokenType)0;
}

/*void OSI_API_CALL OSIX::Parser::beginGlobal()
{
  QParser::Grammar* grammarObject = _this.getActiveObject<QParser::Grammar>();
  grammarObject->beginGlobal();
}

void OSI_API_CALL OSIX::Parser::endGlobal()
{
  QParser::Grammar* grammarObject = _this.getActiveObject<QParser::Grammar>();
  grammarObject->constructGlobalStatements();
}*/

OSid OSI_API_CALL OSIX::Parser::stringToken(const OSchar* tokenName, const OSchar* value)
{
  QParser::Grammar* grammarObject = _this.getActiveObject<QParser::Grammar>();
  return grammarObject->stringToken(tokenName, value);
}

OSid OSI_API_CALL OSIX::Parser::charToken(const OSchar* tokenName, char value)
{
  QParser::Grammar* grammarObject = _this.getActiveObject<QParser::Grammar>();
  return grammarObject->charToken(tokenName, value);
}

OSid OSI_API_CALL OSIX::Parser::boundedToken(const OSchar* tokenName, const OSchar* leftBoundingValue, const OSchar* rightBoundingValue, PARSER_BOUNDED_LINETYPE lineType)
{

  // todo: handle line type.....

  QParser::Grammar* grammarObject = _this.getActiveObject<QParser::Grammar>();
  return grammarObject->boundedToken(tokenName, leftBoundingValue, rightBoundingValue);
}

/*void OSI_API_CALL OSIX::Parser::beginStatements()
{}

void OSI_API_CALL OSIX::Parser::endStatements()
{
  QParser::Grammar* grammarObject = _this.getActiveObject<QParser::Grammar>();
  grammarObject->constructStatements();
}

OSid OSI_API_CALL OSIX::Parser::beginSequence(const OSchar* statementName)
{
  return _this.getActiveObject<QParser::Grammar>()->beginSequence(statementName);
}

void OSI_API_CALL OSIX::Parser::endSequence()
{
  return _this.getActiveObject<QParser::Grammar>()->endSequence();
}

void OSI_API_CALL OSIX::Parser::sequenceStatement(OSid statement, PARSER_SEQUENCE_MULTIPLIER multiplier)
{
  QParser::Grammar* grammarObject = _this.getActiveObject<QParser::Grammar>();
  return grammarObject->sequenceElement(statement, multiplier);
}

void OSI_API_CALL OSIX::Parser::sequenceToken(OSid token, PARSER_SEQUENCE_MULTIPLIER multiplier)
{
  return _this.getActiveObject<QParser::Grammar>()->sequenceElement(token, multiplier);
}

void OSI_API_CALL OSIX::Parser::sequenceIdentifier()
{
  return _this.getActiveObject<QParser::Grammar>()->sequenceElement(QParser::Grammar::ID_UNKNOWN_WORD_TOKEN, SINGLE_REQUIRED);
}

void OSI_API_CALL OSIX::Parser::sequenceRaw(OSid token)
{
  return _this.getActiveObject<QParser::Grammar>()->sequenceElement(token, SINGLE_REQUIRED);
}

OSid OSI_API_CALL OSIX::Parser::beginSwitch(const OSchar* statementName)
{
  return _this.getActiveObject<QParser::Grammar>()->beginSwitch(statementName);
}

void OSI_API_CALL OSIX::Parser::endSwitch()
{
  return _this.getActiveObject<QParser::Grammar>()->endSwitch();
}

void OSI_API_CALL OSIX::Parser::switchStatement(OSid statement)
{
  _this.getActiveObject<QParser::Grammar>()->switchElement(statement);
}

void OSI_API_CALL OSIX::Parser::switchToken(OSid token)
{
  _this.getActiveObject<QParser::Grammar>()->switchElement(token);
}*/

void OSI_API_CALL OSIX::Parser::beginLanguage()
{}

void OSI_API_CALL OSIX::Parser::endLanguage()
{
  QParser::Grammar* grammarObject = _this.getActiveObject<QParser::Grammar>();
  grammarObject->constructProductions();
}

OSid OSI_API_CALL OSIX::Parser::beginProduction(const OSchar* productionName)
{
  return _this.getActiveObject<QParser::Grammar>()->beginProduction(productionName);
}

void OSI_API_CALL OSIX::Parser::endProduction()
{
  return _this.getActiveObject<QParser::Grammar>()->endProduction();
}

void OSI_API_CALL OSIX::Parser::productionProduction(OSid production)
{
  QParser::Grammar* grammarObject = _this.getActiveObject<QParser::Grammar>();
  return grammarObject->productionNonterminal(production);
}

void OSI_API_CALL OSIX::Parser::productionToken(OSid token)
{
  return _this.getActiveObject<QParser::Grammar>()->productionTerminal(token);
}

/*void OSI_API_CALL OSIX::Parser::productionIdentifier()
{
  return _this.getActiveObject<QParser::Grammar>()->productionTerminal(QParser::Grammar::ID_UNKNOWN_WORD_TOKEN);
}*/

OSid OSI_API_CALL OSIX::Parser::productionDeclIdentifier(const OSchar* type)
{
  return _this.getActiveObject<QParser::Grammar>()->productionDeclIdentifier(type);
}

void OSI_API_CALL OSIX::Parser::productionRefIdentifier(OSid type)
{
  return _this.getActiveObject<QParser::Grammar>()->productionRefIdentifier(type);
}

void OSI_API_CALL OSIX::Parser::productionRaw(OSid token)
{
  return _this.getActiveObject<QParser::Grammar>()->productionTerminal(token);
}

OSid OSI_API_CALL OSIX::Parser::declareProduction(const OSchar* productionName)
{
  return _this.getActiveObject<QParser::Grammar>()->declareProduction(productionName);
}

void OSI_API_CALL OSIX::Parser::startProduction(OSid production)
{
  _this.getActiveObject<QParser::Grammar>()->grammarStartSymbol(production);
}

OSobject OSI_API_CALL OSIX::Parser::parseFile(const OSchar* fileName)
{
  QParser::Grammar* grammarObject = _this.grammar;

  QParser::Grammar::ParseResult::ParseResult* parseResult = _this.beginObject<QParser::Grammar::ParseResult>();
  grammarObject->parseFile(fileName, *parseResult);
  _this.endObject<QParser::Grammar::ParseResult>();

  return cast_object(parseResult);
}

OSobject OSI_API_CALL OSIX::Parser::parseString(const OSchar* stringBuffer)
{
  QParser::Grammar* grammarObject = _this.grammar;

  QParser::Grammar::ParseResult::ParseResult* parseResult = _this.beginObject<QParser::Grammar::ParseResult>();
  grammarObject->parseString(stringBuffer, *parseResult);
  _this.endObject<QParser::Grammar::ParseResult>();

  return cast_object(parseResult);
}

OSid OSI_API_CALL OSIX::Parser::getParseTokens(OSobject parseResult)
{
  // todo
  return 0;
}

void OSI_API_CALL OSIX::Parser::delObject(OSobject object)
{
  _this.delObject((Base::Object*)object);
}

void* OSI_API_CALL OSIX::Parser::debugInit()
{
# ifdef _DEBUG
    return &_this.parserDbg;
# else
    return null;
# endif
}

#ifdef _DEBUG
  void OSI_API_CALL OSIX::ParserDbg::debugOutputTokens()
  {
    QParser::Grammar* grammarObject = ((QParser::Parser::ParserDbg*)this)->getParser().grammar;
    grammarObject->debugOutputTokens();
  }

  void OSIX::ParserDbg::debugOutputProductions()
  {
    QParser::Grammar* grammarObject = ((QParser::Parser::ParserDbg*)this)->getParser().grammar;
    grammarObject->debugOutputProductions();
  }

  void OSIX::ParserDbg::debugOutputGrammar()
  {
    QParser::Grammar* grammarObject = ((QParser::Parser::ParserDbg*)this)->getParser().grammar;
    grammarObject->debugOutputStates();
    grammarObject->debugOutputTable();
  }

  void OSIX::ParserDbg::debugOutputParseResult(OSobject parseResult)
  {
    QParser::Grammar* grammarObject = ((QParser::Parser::ParserDbg*)this)->getParser().grammar;
    grammarObject->debugOutputParseResult(parseResult);
  }
#endif

OSIX::Parser* OSI_API_CALL OSIX::parserInit()
{
  return (OSIX::Parser*)new QParser::Parser();
};

#endif
#endif
